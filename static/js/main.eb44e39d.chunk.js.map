{"version":3,"sources":["context/AuthProvider.tsx","component/Account.tsx","component/auth/Login.tsx","component/Home.tsx","component/Install.tsx","common/logo.svg","common/AppIcon.tsx","context/ThemeProvider.tsx","component/NavBar.tsx","component/Main.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["app","firebase","apps","length","initializeApp","FireBaseConfig","db","firestore","auth","setPersistence","Auth","Persistence","LOCAL","functions","unsubscribeCallbacksMap","Map","AuthUserContext","createContext","SubscriptionContext","undefined","AuthProvider","props","useState","userState","setUserState","subscriptionState","setSubscriptionState","useEffect","onAuthStateChanged","user","unsubscribe","aUUID","uuidv4","set","pushUnsubscribeCallback","collection","doc","uid","onSnapshot","snap","exists","subData","data","subscriptionLevel","Provider","value","children","useUserContext","useContext","useSubscriptionContext","unsubScribeFromAllListeners","forEach","clear","createPortalLink","a","functionRef","httpsCallable","returnUrl","window","location","origin","assign","url","EmailAuthProvider","PROVIDER_ID","Account","stripe","useStripe","snackbar","useSnackbar","displayName","setDisplayName","localVersion","AppConfig","version","onlineVersion","setOnlineVersion","isVersionUpToDate","get","then","appInfo","handleCreateNewSubscription","enqueueSnackbar","variant","add","price","StripeConfig","subscription_prices_keys","basic","success_url","cancel_url","error","sessionId","alert","message","redirectToCheckout","matVariant","TextField","fullWidth","label","email","disabled","onChange","e","target","Button","startIcon","onClick","style","color","signOut","confirmDelete","confirm","delete","console","log","catch","deleteAccount","Login","history","useHistory","uiConfig","signInFlow","signInOptions","callbacks","signInSuccessWithAuthResult","initialPath","state","from","pathname","to","height","id","firebaseAuth","Home","Install","textAlign","Grid","container","spacing","item","xs","href","src","AppIcon","logo","alt","defaultTheme","theme_color","background_color","ThemeContext","NavBar","theme","AppBar","position","backgroundColor","Toolbar","flexGrow","aria-label","Main","path","PrivateRoute","rest","render","stripePromise","loadStripe","publishableKey","App","anchorOrigin","vertical","horizontal","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","URL","process","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.eb44e39d.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\n// import Firebase\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\n\nimport FireBaseConfig from '../config/firebase.config.json'\n\n// initalize Firebase\nconst app = (!firebase.apps.length) ? firebase.initializeApp(FireBaseConfig) : firebase.app();\nconst db = app.firestore();\nconst auth = app.auth();\nauth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);\nconst functions = app.functions('us-central1');\nlet unsubscribeCallbacksMap: Map<string, (() => void)> = new Map();\n\n// create contexts\nconst AuthUserContext = createContext<firebase.User | null>(null);\nconst SubscriptionContext = createContext<any | undefined>(undefined);\n\ninterface IAuthContextProps {\n    children: any\n}\n\n// AuthProvider wraps all of the Auth functionality\nexport function AuthProvider(props: IAuthContextProps) {\n    const [userState, setUserState] = useState<firebase.User | null>(null);\n    const [subscriptionState, setSubscriptionState] = useState<any | undefined>(undefined);\n    useEffect(() => {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                const unsubscribe = db.collection('users')\n                    .doc(user.uid)\n                    .collection('user_only').doc('account_data')\n                    .onSnapshot((snap) => {\n                        if (snap.exists) {\n                            const subData = snap.data();\n                            if (subData?.subscriptionState === 'basic') {\n                                // currently only basic exists, can add different tiers later\n                                setSubscriptionState({ subscriptionLevel: 'basic' })\n                            }\n                        }\n                    });\n                pushUnsubscribeCallback(unsubscribe);\n            } else {\n                setSubscriptionState(undefined);\n            }\n            setUserState(user)\n        });\n    }, []);\n    return <AuthUserContext.Provider value={userState}>\n        <SubscriptionContext.Provider value={subscriptionState}>\n            {props.children}\n        </SubscriptionContext.Provider>\n    </AuthUserContext.Provider>;\n}\n\n// expose methods for accessing different AuthContexts \nexport function useUserContext() {\n    return useContext(AuthUserContext);\n}\nexport function useSubscriptionContext() {\n    return useContext(SubscriptionContext);\n}\n\n// expose globabl variables\nexport function getAuth() {\n    return auth;\n}\n\nexport function getDb() {\n    return db;\n}\n\nexport function getFunctions() {\n    return functions\n}\n\n/**\n * Any onSnapshot calls from firebase will return an unsubscribe \n * method to kill the listener to that portion of the database, \n * all listeners will want to be killed on logout or on account delete.\n * Push the unsubscribe method to be called later during one of these actions.\n */\nexport function pushUnsubscribeCallback(unsubscribe: (() => void)) {\n    let aUUID = uuidv4();\n    unsubscribeCallbacksMap.set(aUUID, unsubscribe);\n    return aUUID;\n}\n\nfunction unsubScribeFromAllListeners() {\n    // call each unsubscribe method\n    unsubscribeCallbacksMap.forEach((unsubscribe) => {\n        unsubscribe();\n    });\n    // reset map\n    unsubscribeCallbacksMap.clear();\n}\n\nexport function unsubscribeFromListener(id: string) {\n    const unsubscribe = unsubscribeCallbacksMap.get(id);\n    if (unsubscribe) {\n        unsubscribe();\n        unsubscribeCallbacksMap.delete(id);\n    } else {\n        console.error(\"No listener with the id \" + id + \" exists\");\n    }\n}\n\nexport function logout() {\n    unsubScribeFromAllListeners();\n    auth.signOut();\n}\n\nexport function deleteAccount(user: firebase.User) {\n    unsubScribeFromAllListeners();\n    user.delete().then(() => console.log('Successfully deleted account')).catch((e) => console.error(e));\n}\n\n// MISC Stripe things\nexport async function createPortalLink() {\n    // code copied from the docs that redirects to manage stripe account\n    const functionRef = functions.httpsCallable('ext-firestore-stripe-subscriptions-createPortalLink');\n    const { data } = await functionRef({ returnUrl: window.location.origin });\n    window.location.assign(data.url);\n    return true;\n}\n\n\n// Configure FirebaseUI.\nexport const uiConfig: firebaseui.auth.Config = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // We will display email\n    signInOptions: [\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n    }\n};\n","import { useEffect, useState } from \"react\";\nimport { useStripe } from \"@stripe/react-stripe-js\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport BlockIcon from '@material-ui/icons/Block';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from '@material-ui/icons/Save';\n\nimport { createPortalLink, getDb, useUserContext, logout, useSubscriptionContext, deleteAccount } from \"../context/AuthProvider\";\nimport StripeConfig from '../config/stripe.config.json'\nimport AppConfig from '../config/app.config.json'\n\nimport { useSnackbar } from 'notistack';\n\nexport default function Account() {\n    // get global variables from providers\n    const user = useUserContext();\n    const db = getDb();\n    const stripe = useStripe();\n    const subscriptionState = useSubscriptionContext();\n    const snackbar = useSnackbar();\n\n    // nickname\n    const [displayName, setDisplayName] = useState(user?.displayName);\n\n    // versioning\n    const localVersion = AppConfig.version;\n    const [onlineVersion, setOnlineVersion] = useState<string | undefined>(undefined);\n    const isVersionUpToDate = onlineVersion === localVersion;\n\n    // request version information from the database\n    useEffect(() => {\n        db.collection('public_data').doc('app_info').get().then((snap) => {\n            const appInfo = snap.data();\n            setOnlineVersion(appInfo?.version);\n        });\n    }, [db])\n\n    // button click handlers\n    function handleLogout() {\n        logout();\n    }\n    const handleDeleteAccount = () => {\n        const confirmDelete = window.confirm(\"Are you sure?\");\n        if (user && confirmDelete) {\n            deleteAccount(user);\n        }\n    };\n    const handleCreateNewSubscription = async () => {\n        if (user) {\n            snackbar.enqueueSnackbar('Redirecting to Stripe...', { variant: 'info' });\n            const docRef = await db.collection('customers').doc(user.uid).collection('checkout_sessions').add({\n                price: StripeConfig.subscription_prices_keys.basic,// priceId from stripe\n                success_url: window.location.origin, // return user to this screen\n                cancel_url: window.location.origin, // return user to this screen\n            });\n            docRef.onSnapshot((snap) => {\n                const data = snap.data();\n                if (data) {\n                    const { error, sessionId } = data;\n                    if (error) {\n                        // Show an error to your customer and \n                        // inspect your Cloud Function logs in the Firebase console.\n                        alert('An error occured: ' + error.message);\n                    }\n                    if (sessionId) {\n                        if (stripe) {\n                            stripe.redirectToCheckout({ sessionId })\n                        }\n                    }\n                }\n            });\n        }\n\n    }\n    async function handleCreatePortalLink() {\n        snackbar.enqueueSnackbar('Redirecting to Stripe...', { variant: 'info' });\n        await createPortalLink();\n        return true;\n    }\n    function handleUpdateProfile() {\n\n    }\n\n    const matVariant = \"outlined\";\n\n    return <div >\n        <div>\n            <h2>Account Information</h2>\n            <div><TextField variant={matVariant} fullWidth={true} label=\"Email\" value={user?.email} disabled={true} /></div>\n            <br></br>\n            <div><TextField variant={matVariant} fullWidth={true} label=\"Name\" value={displayName} onChange={(e) => setDisplayName(e.target.value)} /></div>\n            <br></br>\n            <Button variant={matVariant} fullWidth={true} startIcon={<SaveIcon />} onClick={handleUpdateProfile} disabled={true}>Save</Button>\n        </div>\n        <div>\n            <h2>Subscriptions</h2>\n            <div>\n                {subscriptionState?.subscriptionLevel ? subscriptionState.subscriptionLevel : 'None'}\n                {subscriptionState ?\n                    <CheckCircleOutlineIcon style={{ color: \"green\" }}></CheckCircleOutlineIcon> :\n                    <BlockIcon style={{ color: \"red\" }}></BlockIcon>}\n                {subscriptionState ?\n                    <div>\n                        <Button variant={matVariant} fullWidth={true} onClick={handleCreatePortalLink}>Manage Subscriptions</Button>\n                    </div> :\n                    <div>\n                        <Button variant={matVariant} fullWidth={true} onClick={handleCreateNewSubscription} >Subscribe</Button>\n                    </div>\n                }\n            </div>\n            {/* give more information below */}\n            {/* new Date(subData.cancel_at.seconds*1000).toLocaleDateString() */}\n        </div>\n        <br></br>\n        <div>\n            <h2>Version Info</h2>\n            <div>UI version: {localVersion}</div>\n            <div>Up to date: {isVersionUpToDate ?\n                <CheckCircleOutlineIcon style={{ color: \"green\" }}></CheckCircleOutlineIcon> :\n                <div>\n                    <BlockIcon style={{ color: \"red\" }}></BlockIcon>\n                </div>}\n            </div>\n        </div>\n        <br></br>\n        <div>\n            <Button variant={matVariant} fullWidth={true} onClick={handleLogout} >Logout</Button>\n        </div>\n        <br></br>\n        <div>\n            <Button variant={matVariant} fullWidth={true} startIcon={<DeleteIcon />} onClick={handleDeleteAccount} color=\"secondary\">Delete Account</Button>\n        </div>\n\n    </div>\n}","\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { Redirect, useHistory } from \"react-router-dom\";\n\nimport { getAuth, useUserContext } from '../../context/AuthProvider';\n\nexport default function Login() {\n    const history = useHistory();\n    const auth = getAuth();\n    const user = useUserContext();\n    // Configure FirebaseUI.\n    const uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // We will display email\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            // Avoid redirects after sign-in.\n            signInSuccessWithAuthResult: () => false\n        }\n    };\n\n    // Redirect to the original requested url\n    let initialPath: any = undefined;\n    if (history && history.location && history.location.state) {\n        const state: any = history.location.state;\n        if (state && state.from && state.from.pathname) {\n            initialPath = state.from.pathname;\n        }\n    }\n    if (user) {\n        if (initialPath && initialPath !== '/login') {\n            return <Redirect to={initialPath}></Redirect>;\n        } else {\n            return <Redirect to=\"/\"></Redirect>;\n        }\n    } else {\n        return <div>\n            <div style={{ height: \"20px\" }}>  </div>\n            <div id=\"firebaseui-auth-container\">\n                <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth} />\n            </div>\n        </div>\n    }\n}","import { Link } from \"react-router-dom\";\nimport { useSubscriptionContext, useUserContext } from \"../context/AuthProvider\";\nexport default function Home() {\n    const user = useUserContext();\n    const subscriptionState = useSubscriptionContext();\n\n    return <div>\n        <div>Welcome {user?.displayName} !</div>\n        <div>\n            {subscriptionState ? <div></div> :\n                <div>\n                    <div>Update your subscription to see this content</div>\n                    <div><Link to=\"/account\">Subscribe</Link></div>\n                </div>\n            }\n        </div>\n    </div>\n}","import { Divider, Grid, Link } from '@material-ui/core';\n\nexport default function Install() {\n    return <div style={{ textAlign: \"left\" }}>\n        <Grid container spacing={3}>\n\n            <Grid item xs={1}>\n                {/* Padding */}\n            </Grid>\n            <Grid item xs={10}>\n                <p>\n                    This application is a <b>P</b>rogressive <b>W</b>eb <b>A</b>pplication or <b>PWA</b> for short.<br></br>\n                    Because of this, the aplication can be installed locally on phone or desktop computer.\n\n                    Note: Updates occur regularly\n                </p>\n                <h3>Installation instructions</h3>\n                <div>\n                    <a href=\"https://medium.com/progressivewebapps/how-to-install-a-pwa-to-your-device-68a8d37fadc1\">Medium</a>\n                    <div >\n                        <iframe src=\"https://medium.com/progressivewebapps/how-to-install-a-pwa-to-your-device-68a8d37fadc1\">\n                        </iframe>\n                    </div>\n                </div>\n            </Grid>\n            <Grid item xs={1}>\n                {/* Padding */}\n            </Grid>\n        </Grid>\n\n    </div>\n}","export default __webpack_public_path__ + \"static/media/logo.e24ff742.svg\";","import { Link } from \"react-router-dom\";\nimport logo from './logo.svg';\nexport default function AppIcon(props: any) {\n  return <Link to=\"/\" style={{ color: \"white\" }}>\n    <img src={logo} alt=\"HOME\" height=\"24px\"></img>\n  </Link>\n}","import { createContext, useContext } from 'react';\n\nconst defaultTheme = {\n    color: \"white\",\n    theme_color: \"#ffd700\",\n    background_color: \"#728a75\"\n}\n\nconst ThemeContext = createContext(defaultTheme);\n\ninterface IThemeContextProps {\n    children: any\n}\n\nexport function ThemeProvider(props: IThemeContextProps) {\n    return <ThemeContext.Provider value={defaultTheme}>\n        {props.children}\n    </ThemeContext.Provider>;\n}\n\nexport function useThemeContext() {\n    return useContext(ThemeContext);\n}","import { Link } from \"react-router-dom\";\nimport { AppBar, Toolbar } from \"@material-ui/core\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\nimport AppIcon from '../common/AppIcon'\nimport { useThemeContext } from \"../context/ThemeProvider\";\nexport default function NavBar() {\n    const theme = useThemeContext();\n    return <AppBar position=\"static\" style={{ backgroundColor: theme.background_color }}>\n        <Toolbar>\n            <AppIcon></AppIcon>\n            <div style={{ flexGrow: 1 }}></div>\n            <Link to=\"/account\" style={{ color: \"white\" }}>\n                <AccountCircleIcon aria-label=\"account\" color=\"inherit\"></AccountCircleIcon>\n            </Link>\n        </Toolbar>\n    </AppBar>\n}","// import router\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport { useUserContext } from \"../context/AuthProvider\";\nimport Account from \"./Account\";\nimport Login from \"./auth/Login\";\nimport Home from \"./Home\";\nimport Install from \"./Install\";\nimport NavBar from \"./NavBar\";\n\nexport default function Main() {\n    return <div style={{ textAlign: \"center\" }}>\n        <Router>\n            <NavBar></NavBar>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login></Login>\n                </Route>\n                <Route path=\"/install\">\n                    <Install></Install>\n                </Route>\n                <PrivateRoute path=\"/account\">\n                    <Account></Account>\n                </PrivateRoute>\n                <PrivateRoute path=\"/\">\n                    <Home></Home>\n                </PrivateRoute>\n                {/* Default path back to home */}\n                <PrivateRoute path=\"*\">\n                    <Redirect to=\"/\"></Redirect>\n                </PrivateRoute>\n            </Switch>\n        </Router>\n    </div>\n}\n\ninterface IRouteProps {\n    children: any,\n    path: string\n}\n\nfunction PrivateRoute({ children, ...rest }: IRouteProps) {\n    const user = useUserContext();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}","import Main from \"./component/Main\";\nimport { AuthProvider } from \"./context/AuthProvider\";\nimport { Elements } from '@stripe/react-stripe-js';\nimport { SnackbarProvider } from 'notistack';\n\n// import Stripe\nimport { loadStripe } from '@stripe/stripe-js';\nimport StripeConfig from './config/stripe.config.json'\n\n// initialize Stripe\nconst stripePromise = loadStripe(StripeConfig.publishableKey)\n\nfunction App() {\n  return (<AuthProvider>\n    <Elements stripe={stripePromise}>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}>\n        <Main />\n      </SnackbarProvider>\n    </Elements>\n  </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}