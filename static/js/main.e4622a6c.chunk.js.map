{"version":3,"sources":["context/AuthProvider.tsx","component/Account.tsx","component/auth/Login.tsx","component/Home.tsx","component/Main.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["app","firebase","apps","length","initializeApp","FireBaseConfig","db","firestore","auth","setPersistence","Auth","Persistence","LOCAL","functions","unsubscribeCallbacks","AuthUserContext","createContext","SubscriptionContext","undefined","AuthProvider","props","useState","userState","setUserState","subscriptionState","setSubscriptionState","useEffect","onAuthStateChanged","user","unsubscribe","collection","doc","uid","onSnapshot","snap","forEach","subscription","data","product","get","StripeConfig","subscription_product_key","basic","subscriptionLevel","push","Provider","value","children","useUserContext","useContext","unsubScribeFromAllListeners","i","createPortalLink","a","functionRef","httpsCallable","returnUrl","window","location","origin","assign","url","EmailAuthProvider","PROVIDER_ID","Account","stripe","useStripe","isRedirectingToManageStripeAccount","setIsRedirectingToManageStripeAccount","isRedirectingToCreateSubscription","setIsRedirectingToCreateSubscription","handleCreateNewSubscription","add","price","subscription_prices_keys","success_url","cancel_url","error","sessionId","alert","message","redirectToCheckout","handleCreatePortalLink","email","displayName","Button","onClick","CircularProgress","signOut","delete","then","console","log","catch","e","deleteAccount","color","Login","history","useHistory","uiConfig","signInFlow","signInOptions","callbacks","signInSuccessWithAuthResult","initialPath","state","from","pathname","to","id","firebaseAuth","Home","Main","path","PrivateRoute","rest","render","stripePromise","loadStripe","publishableKey","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","URL","process","href","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e4622a6c.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// import Firebase\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\n\nimport FireBaseConfig from '../config/firebase.config.json'\nimport StripeConfig from '../config/stripe.config.json'\n\n// initalize Firebase\nconst app = (!firebase.apps.length) ? firebase.initializeApp(FireBaseConfig) : firebase.app();\nconst db = app.firestore();\nconst auth = app.auth();\nauth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);\nconst functions = app.functions('us-central1');\nlet unsubscribeCallbacks: (() => void)[] = [];\n\n// create contexts\nconst AuthUserContext = createContext<firebase.User | null>(null);\nconst SubscriptionContext = createContext<any | undefined>(undefined);\n\ninterface IAuthContextProps {\n    children: any\n}\n\n// AuthProvider wraps all of the Auth functionality\nexport function AuthProvider(props: IAuthContextProps) {\n    const [userState, setUserState] = useState<firebase.User | null>(null);\n    const [subscriptionState, setSubscriptionState] = useState<any | undefined>(undefined);\n    useEffect(() => {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                const unsubscribe = db.collection('customers')\n                    .doc(user.uid)\n                    .collection('subscriptions')\n                    .onSnapshot((snap) => {\n                        snap.forEach((subscription) => {\n                            const subData = subscription.data()\n                            if (subData.product.get(StripeConfig.subscription_product_key.basic)) {\n                                // currenlty only basic exists, can add different tiers using role\n                                setSubscriptionState({ subscriptionLevel: 'basic' })\n                            }\n                        });\n                    });\n                unsubscribeCallbacks.push(unsubscribe);\n            } else {\n                setSubscriptionState(undefined);\n            }\n            setUserState(user)\n        });\n    }, []);\n    return <AuthUserContext.Provider value={userState}>\n        <SubscriptionContext.Provider value={subscriptionState}>\n            {props.children}\n        </SubscriptionContext.Provider>\n    </AuthUserContext.Provider>;\n}\n\n// expose methods for accessing different AuthContexts \nexport function useUserContext() {\n    return useContext(AuthUserContext);\n}\nexport function useSubscriptionContext() {\n    return useContext(SubscriptionContext);\n}\n\n// expose globabl variables\nexport function getAuth() {\n    return auth;\n}\n\nexport function getDb() {\n    return db;\n}\n\nexport function getFunctions() {\n    return functions\n}\n\n/**\n * Any onSnapshot calls from firebase will return an unsubscribe \n * method to kill the listener to that portion of the database, \n * all listeners will want to be killed on logout or on account delete.\n * Push the unsubscribe method to be called later during one of these actions.\n */\nexport function pushUnsubscribeCallback(unsubscribe: (() => void)) {\n    unsubscribeCallbacks.push(unsubscribe);\n}\n\nfunction unsubScribeFromAllListeners() {\n    // call each unsubscribe method\n    for (let i = 0; i < unsubscribeCallbacks.length; i++) {\n        const unsubscribe = unsubscribeCallbacks[i];\n        unsubscribe();\n    }\n    // reset array\n    unsubscribeCallbacks = [];\n}\n\nexport function logout() {\n    unsubScribeFromAllListeners();\n    auth.signOut();\n}\n\nexport function deleteAccount(user: firebase.User) {\n    unsubScribeFromAllListeners();\n    user.delete().then(() => console.log('Successfully deleted account')).catch((e) => console.error(e));\n}\n\n// MISC Stripe things\nexport async function createPortalLink(functions: firebase.functions.Functions) {\n    // code copied from the docs that redirects to manage stripe account\n    const functionRef = functions.httpsCallable('ext-firestore-stripe-subscriptions-createPortalLink');\n    const { data } = await functionRef({ returnUrl: window.location.origin });\n    window.location.assign(data.url);\n    return true;\n}\n\n\n// Configure FirebaseUI.\nexport const uiConfig: firebaseui.auth.Config = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // We will display email\n    signInOptions: [\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n    }\n};\n","import { useStripe } from \"@stripe/react-stripe-js\";\nimport { createPortalLink, getDb, getFunctions, useUserContext, logout, useSubscriptionContext, deleteAccount } from \"../context/AuthProvider\";\nimport StripeConfig from '../config/stripe.config.json'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Button } from \"@material-ui/core\";\nimport { useState } from \"react\";\n\nexport default function Account() {\n    const user = useUserContext();\n    const db = getDb();\n    const stripe = useStripe();\n    const functions = getFunctions();\n    const subscriptionState = useSubscriptionContext();\n\n    const [isRedirectingToManageStripeAccount, setIsRedirectingToManageStripeAccount] = useState(false);\n    const [isRedirectingToCreateSubscription, setIsRedirectingToCreateSubscription] = useState(false);\n\n    function handleLogout() {\n        logout();\n    }\n    const handleDeleteAccount = () => {\n        if (user) {\n            deleteAccount(user);\n        }\n    };\n    const handleCreateNewSubscription = async () => {\n        if (user) {\n            setIsRedirectingToCreateSubscription(true);\n            const docRef = await db.collection('customers').doc(user.uid).collection('checkout_sessions').add({\n                price: StripeConfig.subscription_prices_keys.basic,// priceId from stripe\n                success_url: window.location.origin, // return user to this screen\n                cancel_url: window.location.origin, // return user to this screen\n            });\n            docRef.onSnapshot((snap) => {\n                const data = snap.data();\n                if (data) {\n                    const { error, sessionId } = data;\n                    if (error) {\n                        // Show an error to your customer and \n                        // inspect your Cloud Function logs in the Firebase console.\n                        alert('An error occured: ' + error.message);\n                    }\n                    if (sessionId) {\n                        if (stripe) {\n                            stripe.redirectToCheckout({ sessionId })\n                            setIsRedirectingToCreateSubscription(false);\n                        }\n                    }\n                }\n            });\n        }\n\n    }\n    const handleCreatePortalLink = async () => {\n        setIsRedirectingToManageStripeAccount(true);\n        await createPortalLink(functions);\n        setIsRedirectingToManageStripeAccount(false);\n    }\n\n\n    return <div>\n        <div>\n            <h2>Account Information</h2>\n            <div>Email: {user?.email}</div>\n            <div>Name: {user?.displayName}</div>\n        </div>\n        <div>\n            <h2>Subscription Status</h2>\n            <div>Subscription State: {subscriptionState ? subscriptionState.subscriptionLevel : 'Not subscribed'}</div>\n            {subscriptionState ?\n                <div>\n                    <Button onClick={handleCreatePortalLink}>Manage Subscriptions</Button>\n                    {isRedirectingToManageStripeAccount ? <CircularProgress /> : <div></div>}\n                </div> :\n                <div>\n                    <Button onClick={handleCreateNewSubscription}>Subscribe</Button>\n                    {isRedirectingToCreateSubscription ? <CircularProgress /> : <div></div>}\n                </div>\n            }\n            {/* give more information below */}\n            {/* new Date(subData.cancel_at.seconds*1000).toLocaleDateString() */}\n        </div>\n        <div>\n            <Button onClick={handleLogout} >Logout</Button>\n        </div>\n        <div>\n            <Button onClick={handleDeleteAccount} color=\"secondary\">Delete Account</Button>\n        </div>\n    </div>\n}","\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { Redirect, useHistory } from \"react-router-dom\";\n\nimport { getAuth, useUserContext } from '../../context/AuthProvider';\n\nexport default function Login() {\n    const history = useHistory();\n    const auth = getAuth();\n    const user = useUserContext();\n    // Configure FirebaseUI.\n    const uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // We will display email\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            // Avoid redirects after sign-in.\n            signInSuccessWithAuthResult: () => false\n        }\n    };\n\n    // Redirect to the original requested url\n    let initialPath: any = undefined;\n    if (history && history.location && history.location.state) {\n        const state: any = history.location.state;\n        if (state && state.from && state.from.pathname) {\n            initialPath = state.from.pathname;\n        }\n    }\n    if (user) {\n        if (initialPath && initialPath !== '/login') {\n            return <Redirect to={initialPath}></Redirect>;\n        } else {\n            return <Redirect to=\"/\"></Redirect>;\n        }\n    } else {\n        return <div id=\"firebaseui-auth-container\">\n            <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth} />\n        </div>\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useUserContext } from \"../context/AuthProvider\";\nexport default function Home() {\n    const user = useUserContext();\n    return <div>\n        <div>Welcome {user?.displayName} !</div>\n        <div>\n            <Link to=\"/account\">Account</Link>\n        </div>\n    </div>\n}","import React from \"react\";\n// import router\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport { useUserContext } from \"../context/AuthProvider\";\nimport Account from \"./Account\";\nimport Login from \"./auth/Login\";\nimport Home from \"./Home\";\n\nexport default function Main() {\n    return <Router>\n        <Switch>\n            <Route path=\"/login\">\n                <Login></Login>\n            </Route>\n            <PrivateRoute path=\"/account\">\n                <Account></Account>\n            </PrivateRoute>\n            <PrivateRoute path=\"/\">\n                <Home></Home>\n            </PrivateRoute>\n            {/* Default path back to home */}\n            <PrivateRoute path=\"*\">\n                <Redirect to=\"/\"></Redirect>\n            </PrivateRoute>\n        </Switch>\n    </Router>\n}\n\ninterface IRouteProps {\n    children: any,\n    path: string\n}\n\nfunction PrivateRoute({ children, ...rest }: IRouteProps) {\n    const user = useUserContext();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    children\n                ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: location }\n                            }}\n                        />\n                    )\n            }\n        />\n    );\n}","import Main from \"./component/Main\";\nimport { AuthProvider } from \"./context/AuthProvider\";\nimport { Elements } from '@stripe/react-stripe-js';\n// import Stripe\nimport { loadStripe } from '@stripe/stripe-js';\nimport StripeConfig from './config/stripe.config.json'\n\n// initialize Stripe\nconst stripePromise = loadStripe(StripeConfig.publishableKey)\n\nfunction App() {\n  return (<AuthProvider>\n    <Elements stripe={stripePromise}>\n      <Main />\n    </Elements>\n  </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}