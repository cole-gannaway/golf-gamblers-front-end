{"version":3,"sources":["component/auth/Login.tsx","component/Main.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["auth","firebase","apps","length","app","initializeApp","FireBaseConfig","Login","useState","email","setEmail","password","setPassword","TextField","value","onChange","e","target","label","type","Button","onClick","signInWithEmailAndPassword","then","userCredential","user","console","log","displayName","catch","error","createUserWithEmailAndPassword","signOut","Main","basename","path","to","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3105d8a7.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { useState } from \"react\";\n\nimport FireBaseConfig from '../../config/firebase.config.json'\n\n// initalize Firebase\nconst app = (!firebase.apps.length) ? firebase.initializeApp(FireBaseConfig) : firebase.app();\n// const db = app.firestore();\nconst auth = app.auth();\n\nexport default function Login() {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const createUserWithEmailAndPassword = () => {\n        auth.createUserWithEmailAndPassword(email, password)\n            .then((userCredential) => {\n                // Signed in \n                var user = userCredential.user;\n                // ...\n                if (user) {\n                    console.log(user.displayName);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n    const signIn = () => {\n        auth.signInWithEmailAndPassword(email, password)\n            .then((userCredential) => {\n                // Signed in\n                var user = userCredential.user;\n                if (user) {\n                    console.log(user.displayName);\n                }\n                // ...\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n\n    }\n    const signOut = () => {\n        auth.signOut().then(() => {\n            console.log('Signed out')\n            // Sign-out successful.\n        }).catch((error) => {\n            // An error happened.\n            console.error(error)\n        });\n    }\n\n    const handleEmailChange = (e: any) => {\n        setEmail(e.target.value);\n    }\n    const handlePasswordChange = (e: any) => {\n        setPassword(e.target.value);\n    }\n\n    return <div>\n        <div>Login</div>\n        <div><TextField value={email} onChange={handleEmailChange} label=\"Email\" type=\"email\"></TextField></div>\n        <div><TextField value={password} onChange={handlePasswordChange} label=\"Password\" type=\"password\"></TextField></div>\n        <div><Button onClick={signIn}>Login</Button></div>\n        <div><Button onClick={createUserWithEmailAndPassword}>Create New User</Button></div>\n        <div><Button onClick={signOut}>Logout</Button></div>\n    </div>\n}","// import router\nimport React from \"react\";\nimport {\n    HashRouter,\n    Switch,\n    Route,\n    Link,\n} from \"react-router-dom\";\nimport Login from \"./auth/Login\";\n\n\nexport default function Main() {\n    return <HashRouter basename='/'>\n        <Switch>\n            <Route path=\"/login\">\n                <Login></Login>\n                <Link to=\"/\">Back to Home</Link>\n            </Route>\n            <Route path=\"/\">\n                <div>Welcome Home</div>\n                <Link to=\"/login\">Login</Link>\n            </Route>\n        </Switch>\n    </HashRouter>\n}","import Main from \"./component/Main\";\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}