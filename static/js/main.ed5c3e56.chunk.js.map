{"version":3,"sources":["context/AuthProvider.tsx","component/auth/Login.tsx","component/Main.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["app","firebase","apps","length","initializeApp","FireBaseConfig","db","firestore","auth","setPersistence","Auth","Persistence","SESSION","AuthContext","createContext","AuthDbContext","AuthUserContext","undefined","AuthProvider","props","useState","userState","setUserState","onAuthStateChanged","user","console","log","displayName","Provider","value","children","useUserContext","useContext","EmailAuthProvider","PROVIDER_ID","uiConfig","signInFlow","signInOptions","callbacks","signInSuccessWithAuthResult","Login","authContext","to","firebaseAuth","Main","path","PrivateRoute","email","rest","render","location","pathname","state","from","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ed5c3e56.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nimport FireBaseConfig from '../config/firebase.config.json'\n\n// initalize Firebase\nconst app = (!firebase.apps.length) ? firebase.initializeApp(FireBaseConfig) : firebase.app();\nconst db = app.firestore();\nconst auth = app.auth();\nauth.setPersistence(firebase.auth.Auth.Persistence.SESSION);\n\n// create contexts\nconst AuthContext = createContext<firebase.auth.Auth>(auth);\nconst AuthDbContext = createContext<firebase.firestore.Firestore>(db);\nconst AuthUserContext = createContext<firebase.User | undefined>(undefined);\n\ninterface IAuthContextProps {\n    children: any\n}\n\n// AuthProvider wraps all of the Auth functionality\nexport function AuthProvider(props: IAuthContextProps) {\n    const [userState, setUserState] = useState<firebase.User | undefined>(undefined);\n\n    // login / logout listener\n    auth.onAuthStateChanged((user) => {\n        if (user) {\n            console.log('Succesfully logged in ' + user.displayName);\n            setUserState(user)\n        } else {\n            // initialize and log out\n            setUserState(undefined);\n        }\n    });\n\n\n    // return both the context and the update methods\n    return <AuthContext.Provider value={auth}>\n        <AuthDbContext.Provider value={db}>\n            <AuthUserContext.Provider value={userState}>\n                {props.children}\n            </AuthUserContext.Provider>\n        </AuthDbContext.Provider>\n    </AuthContext.Provider>;\n}\n\n// expose methods for accessing different AuthContexts \nexport function useAuthContext() {\n    return useContext(AuthContext);\n}\n\nexport function useUserContext() {\n    return useContext(AuthUserContext);\n}\n\nexport function useDbContext() {\n    return useContext(AuthDbContext);\n}\n\nexport function authLogout() {\n    auth.signOut().catch((e) => console.error(e));\n}\n\n\n// MISC Firebase things\n\n\n// Configure FirebaseUI.\nexport const uiConfig: firebaseui.auth.Config = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // We will display email\n    signInOptions: [\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n    }\n};\n","\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { Redirect } from \"react-router-dom\";\n\nimport { useAuthContext, useUserContext } from '../../context/AuthProvider';\n\n// Configure FirebaseUI.\nconst uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // We will display email\n    signInOptions: [\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n    }\n};\n\nexport default function Login() {\n    const authContext = useAuthContext();\n    const userContext = useUserContext();\n    if (userContext) {\n        return <Redirect to=\"/\" />\n    } else {\n        return <div>\n            <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={authContext} />\n        </div>\n    }\n}","import React from \"react\";\n// import router\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport { useUserContext } from \"../context/AuthProvider\";\nimport Login from \"./auth/Login\";\n\n\nexport default function Main() {\n    const user = useUserContext();\n    return <Router>\n        <Switch>\n            <Route path=\"/login\">\n                <Login></Login>\n            </Route>\n            <PrivateRoute path=\"/\">\n                <div>Welcome {user?.email} !</div>\n            </PrivateRoute>\n        </Switch>\n    </Router>\n}\n\ninterface IRouteProps {\n    children: any,\n    path: string\n}\n\nfunction PrivateRoute({ children, ...rest }: IRouteProps) {\n    let user = useUserContext();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                user ? (\n                    children\n                ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: location }\n                            }}\n                        />\n                    )\n            }\n        />\n    );\n}","import Main from \"./component/Main\";\nimport { AuthProvider } from \"./context/AuthProvider\";\n\nfunction App() {\n  return (<AuthProvider>\n    <Main />\n  </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}